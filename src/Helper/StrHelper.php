<?phpnamespace Major\Helper;class StrHelper{    private static $string;    /**     * @param string $encode     * @return false|int     */    public static function toASCII(string $encode = 'UTF-8')    {        return mb_ord(self::$string,$encode);    }    // Set the String    /**     * @param string $string     * @return StrHelper     */    public static function setStr(string $string): self    {        self::$string = $string;        return new self();    }    /**     * @param string $encode     * @return string     */    public static function toJadenCase(string $encode = 'UTF-8'): string    {        $newText = '';        $parseText = explode(' ', self::$string);        foreach ($parseText as $text) {            $length = mb_strlen(self::$string, $encode);            $firstCharacter = substr($text, 0, 1);            $remaining = substr($text, 1, $length);            $firstCharacter = mb_strtoupper($firstCharacter, $encode);            $editedText = $firstCharacter . $remaining;            $newText .= $editedText . ' ';        }        return trim($newText);    }    // Returns the character at he specified index (position)    /**     * @param string $character     * @return int     */    public static function charAt(string $character): int    {        return strpos(self::$string, $character);    }    //Joins two or more strings, and returns a new joined strings    /**     * @param string $str     * @return string     */    public static function concat(string $str): string    {        return self::$string .= ' ' . $str;    }    //Checks whether a string begins with specified characters    /**     * @param string $needle     * @param string $encode     * @return bool     */    public static function endsWith(string $needle, string $encode = 'UTF-8'): bool    {        $length = mb_strlen($needle, $encode);        if ($length === 0) {            return false;        }        return (mb_substr(self::$string, -$length, null, $encode) === $needle);    }    // Checks wheter a string ends with specified characters    /**     * @param string $needle     * @param string $encode     * @return bool     */    public static function startsWith(string $needle, $encode = 'UTF-8'): bool    {        $length = (int)mb_strlen($needle, $encode);        if ($length === 0) {            return false;        }        return (mb_substr(self::$string, 0, $length, $encode) === $needle);    }    //Checks whether a string contains the specified string/characters    /**     * @param string $needle     * @return bool     */    public static function includes(string $needle): bool    {        return strpos(self::$string, $needle) !== false;    }    // Converts a string to lowercase letters    /**     * @param string $encode     * @return string     */    public static function toLowerCase(string $encode = 'UTF-8'): string    {        return mb_strtolower(self::$string, $encode);    }    // Converts a string to uppercase letters    /**     * @param string $encode     * @return string     */    public static function toUpperCase(string $encode = 'UTF-8'): string    {        return mb_strtoupper(self::$string, $encode);    }    // Returns the length of string    /**     * @param string $encode     * @return int     */    public static function length(string $encode = 'UTF-8'): int    {        return mb_strwidth(self::$string, $encode);    }    // Returns a new string with a specified number of copies of an existing string    /**     * @param int $integer     * @return string     */    public static function repeat(int $integer): string    {        $newText = '';        if ($integer > 0) {            for ($i = 1; $i <= $integer; $i++) {                $newText .= ' ' . self::$string;            }            return $newText;        }        return false;    }    // Extracts a part of a string and retruns a new string    /**     * @param int $start     * @param int $length     * @return string     */    public static function slice(int $start, int $length): string    {        return mb_substr(self::$string, $start, $length, 'UTF-8');    }    /**     * @param string $oldStr     * @param string $newStr     * @return string     */    public static function replace(string $oldStr, string $newStr): string    {        return str_replace($oldStr, $newStr, self::$string);    }}